<style> 
  input[type="radio"], input[type="checkbox"]
  {
    padding-top: 10px !important;
    width: 20px       !important; 
    height: 20px      !important; 
  } 

  .high_level_requirement_all
  {
    width: 20px !important;
  }

  .itemColumn
  {
     width: 15%            !important;
     align-content: center !important;
     text-align:    left   !important;
  }

  .idColumn
  {
     width: 15%            !important;
     align-content: center !important;
     text-align:    left   !important;
  }

  .descriptionColumn
  {
     width: 40%            !important;
     align-content: center !important;
     text-align:    left   !important;
  }

  .verificationMethodColumn
  {
     width: 15%            !important;
     align-content: center !important;
     text-align:    left   !important;
  }

  .checkboxColumn
  {
     width: 5%             !important;
     align-content: center !important;
     text-align:    center !important;
  }

  table.highLevelRequirementsDataTable thead th
  {
     height: 0px         !important;
     vertical-align: top !important;
  }

  table.highLevelRequirementsDataTable tbody td
  {
     height: 0px         !important;
     vertical-align: top !important;
  }
</style>

Choose Hardware/Software Item in which to find <%= Item.item_type_title(@item, :high_level, :plural) %>
<br>
<select id='high_level_item_select' multiple=true>
  <option></option>
  <% Item.where(project_id: @project.id).order(:identifier).each do |item| %>
    <% if item.id == @item.id %>
      <option id='item_<%= item.id %>' value='<%= item.id %>' selected><%= item.identifier %></option>
    <% else %>
      <option id='item_<%= item.id %>' value='<%= item.id %>'><%= item.identifier %></option>
    <% end %>
  <% end %>
</select>

<table id="highLevelRequirementsDataTable" class="table table-striped table-bordered table-sm" cellspacing="0"  width="100%">
  <thead>
    <tr>
      <th class="high_level_requirement_all"><input :select_high_level_requirement_all_high_level_requirements, { type="checkbox", id="select_high_level_requirement_all_high_level_requirements", value="ALL"}>&nbsp;</th>
      <th scope="col" class="itemColumn">Hardware/<br>Software Item</th>
      <th scope="col" class="idColumn"><%= @item.get_item_title(:high_level, :singular_shortened) %></th>
      <th scope="col" class="descriptionColumn"><%= t('misc.desc') %></th>
      <th scope="col" class="verificationMethodColumn"><%= t('misc.verification_method') %></th>
      <th scope="col" class='checkboxColumn'>Safety</th>
      <th scope="col" class='checkboxColumn'>Robustness</th>
      <th scope="col" class='checkboxColumn'>Derived</th>
    </tr>
  </thead>

  <tbody>
    <% if @high_level_requirements.present? %>
      <% @high_level_requirements.each do |high_level_requirement| %>
        <tr>
          <% if high_level_requirement.selected %>
            <td class="high_level_requirement_all">&nbsp;&nbsp;<input id='high_level_requirement.<%= high_level_requirement.id %>' name='high_level_requirement.<%= high_level_requirement.id %>' type="checkbox" checked value="<%= high_level_requirement.id %>" /></td>
          <% else %>
            <td class="high_level_requirement_all">&nbsp;&nbsp;<input id='high_level_requirement.<%= high_level_requirement.id %>' name='high_level_requirement.<%= high_level_requirement.id %>' type="checkbox" value="<%= high_level_requirement.id %>"/></td>
          <% end %>
          <td scope="col" class="itemColumn"><%= @item.identifier %></th>
          <td class="idColumn"><%= high_level_requirement.fullreqid %></td>
          <td class="descriptionColumn"><%= raw high_level_requirement.description %></td>
          <td class="verificationMethodColumn">
            <% if high_level_requirement.verification_method.instance_of?(Array) %>
              <%= high_level_requirement.verification_method.delete_if{ |x| !x.present? }.join(', ') %>
            <% elsif high_level_requirement.verification_method.instance_of?(String) %>
              <%= high_level_requirement.verification_method %>
            <% end %>
          </td>
          <td class='checkboxColumn'><%= checkicon(high_level_requirement.safety) %></td>
          <td class='checkboxColumn'><%= checkicon(high_level_requirement.robustness) %></td>
          <td class='checkboxColumn'><%= checkicon(high_level_requirement.derived) %></td>
        </tr>
      <% end %>
    <% end %>
  </tbody>
</table>

<br>
<input type='button' value='Save <%= Item.item_type_title(@item, :high_level, :singular) %> Links' style='display: none' onclick='submitHighLevelRequirements();' class='btn' />
<br>

<script>
var highLevelRequirementsDataTable = $('#highLevelRequirementsDataTable').DataTable({
	"sDom":           "Rlfrtip",
  "scrollX":        true,
  "scrollY":        "65vh",
  "aLengthMenu":    [[10, 50, 100, -1], [25, 50, 100, "All"]],
  "pageLength":     -1,
  "scrollCollapse": true,
  "paging":         false,
  "ordering":       false,
  "info":           false
});

function redrawHighLevelRequirementsTable()
{
  highLevelRequirementsDataTable.draw();
}

function ajaxError(xhr, textStatus, errorThrown)
{
  if (xhr.responseText &&
     (xhr.responseText !== ''))
  {
    var newDoc = document.open('text/html',
                               "replace");

    newDoc.write(xhr.responseText);
    newDoc.close();
  }
  else
  {
    alert("Error Occured. " + textStatus + ": " +
          errorThrown);
  }
}

function getHighLevelRequirementCells(row, count)
{
  var cells  = [];

  for (var j = 0; j < count; j++)
    cells[j] = $(`#highLevelRequirementsDataTable tr:${row} td:eq(${j})`);

  return cells;
}

function populateHighLevelRequirementRow(itemName, requirementID, description,
                                         verification_method)
{
  var rowNode;
  var method  = '';

  if (verification_method.length > 0)
  {
    for (var i = 0; i < verification_method.length; i++)
    {
      if (verification_method[i] !== '')
      {
        if (method === '')
          method  = verification_method[i];
        else
          method += ', '+ verification_method[i];
      }
    }
  }

  rowNode = highLevelRequirementsDataTable.row.add([
                                     '',
                                     itemName,
                                     requirementID,
                                     description,
                                     method,
                                     '',
                                     '',
                                     ''
                                  ]).node();
  return rowNode;
}

function setHighLevelRequirementCheckbox(cell, value, id)
{
  if (value)
    cell.replaceWith('<td class="high_level_requirement_all">&nbsp;&nbsp;<input id="high_level_requirement.' + id + '" name="high_level_requirement.' + id + '" type="checkbox" checked value="' + id + '"/></td>');
  else
    cell.replaceWith('<td class="high_level_requirement_all">&nbsp;&nbsp;<input id="high_level_requirement.' + id + '" name="high_level_requirement.' + id + '" type="checkbox" value="' + id + '"/></td>');
}

function setHighLevelRequirementCheckicon(cell, value)
{
  if (value)
    cell.replaceWith('<td class="checkboxColumn"><i class="far fa-check-square"></i></td>');
  else
    cell.replaceWith('<td class="checkboxColumn"><i class="far fa-square"></i></td>');
}

function processHighLevelRequirementsData(data)
{
  var selectedField        = document.getElementById("model_file_high_level_requirement_associations");
  var selectedRequirements = selectedField.value.split(',');

  highLevelRequirementsDataTable.clear();

  for (var j = 0; j < data.length; j++)
  {
    var hlr      = data[j];

    if (hlr.soft_delete)
      continue;

    var id       = hlr.id;
    var item_id  = '#item_' + hlr.item_id;
    var rowNode  = populateHighLevelRequirementRow($(item_id).text(),
                                                   hlr.full_id,
                                                   hlr.description,
                                                   hlr.verification_method);
    var cells    = getHighLevelRequirementCells('last', 7);
    var selected = false;

    for (var k = 0; k < selectedRequirements.length; k++)
    {
      if (selectedRequirements[k] == id)
      {
        selected = true;

        break;
      }
    }

    setHighLevelRequirementCheckbox(cells[0],  selected, id);
    setHighLevelRequirementCheckicon(cells[5], hlr.safety);
    setHighLevelRequirementCheckicon(cells[6], hlr.robustness);
    setHighLevelRequirementCheckicon(cells[7], hlr.derived);
    cells[1].addClass("itemColumn");
    cells[2].addClass("idColumn");
    cells[3].addClass("descriptionColumn");
  }

  highLevelRequirementsDataTable.draw();
}

$("#high_level_item_select").change(function()
{
  var itemIDs    = $('#high_level_item_select').val();
  var url        = window.location.href;
  var itemsIndex = url.indexOf('items/');
  var idString   = '';

  for (var j = 0; j < itemIDs.length; j++)
  {
    if (itemIDs[j] !== '')
    {
      if (idString === '')
        idString  = itemIDs[j];
      else
        idString += ',' + itemIDs[j];
    }
  }

  if (idString === '')
    return;

  url = url.substring(0, itemsIndex + 6) + idString + '/high_level_requirements.json';

  $.ajax(
           {
             type:        "GET",
             url:         url,
             dataType:    'json',
             contentType: 'text/html',
             async:       false,
             error:       ajaxError,
             success:     processHighLevelRequirementsData
           }
        );

  redrawHighLevelRequirementsTable();
});

$("#select_high_level_requirement_all_high_level_requirements").change(function()
{
  var checked = false;

  if (document.getElementById("select_high_level_requirement_all_high_level_requirements").checked)
    checked = true;
  else
    checked = false;

  $("td.high_level_requirement_all input[type=checkbox]").prop('checked', checked);
});

function submitHighLevelRequirements()
{
  var selectedField                             = document.getElementById("model_file_high_level_requirement_associations");
  var linkedHighLevelRequirementsDiv            = document.getElementById('linked_high_level_requirements');
  var linkedSystemRequirementsbutton            = document.getElementById('link_system_requirements_button');
  var linkedHighLevelRequirementsbutton         = document.getElementById('link_high_level_requirements_button');
  var linkedLowLevelRequirementsbutton          = document.getElementById('link_low_level_requirements_button');
  var linkedTestCasesbutton                     = document.getElementById('link_test_cases_button');
  var selected                                  = "";

  $('[id*="high_level_requirement."]').each(function(){
    if ($(this).prop('checked'))
    {
      var value = $(this).prop('value');

      if (value !== "ALL") {
        if (selected !== "")
          selected += "," + value;
        else
          selected = value;
      }
    }
  });

  selectedField.value = selected;

  linkedHighLevelRequirementsDiv.style.display    = 'none';
  linkedSystemRequirementsbutton.style.display    = 'block';
  linkedHighLevelRequirementsbutton.style.display = 'block';
  linkedLowLevelRequirementsbutton.style.display  = 'block';
  linkedTestCasesbutton.style.display             = 'block';
  linkedHighLevelRequirementsbutton.value         = 'Link <%= Item.item_type_title(@item, :high_level, :plural) %>';

  return(true);
}
</script>

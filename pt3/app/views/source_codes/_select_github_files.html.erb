<%= simple_form_for( @github_access, html: { class: 'form-horizontal' }) do |f| %>
  <%= f.error_notification %>

  <div class="form-inputs">
    <%= f.input :last_accessed_repository, label: 'Repository', collection: @repositories, :label_method => :name, :value_method => :name, include_blank: true %>
    <%= f.input :last_accessed_branch,     label: 'Branch',     collection: @branches,     :label_method => :name, :value_method => :name, include_blank: true %>
    <%= f.input :last_accessed_folder,     label: 'Folder',     collection: @folders,      :label_method => :path, :value_method => :path, include_blank: true %>
    <%= f.input :last_accessed_file,       :as => :hidden, :input_html => { :readonly => true } %>
    <%= hidden_field_tag(:item_id,         @item.id) %>
    <%= hidden_field_tag(:github_acess_id, @github_access.id) %>
    <%= hidden_field_tag(:redirect, 'scan')    %>
  </div>

  <div class="form-actions">
    <input id='scan' name='scan' value='Scan' type="button" onclick='validate();' class="btn btn-default" />
    <%= link_to 'Back', go_back_path(1),  onclick: 'validateBack(1, this)', class: 'btn' %>

    <% if @undo_path.present? && !session[:archives_visible].present? %>
      <%= link_to 'Undo', @undo_path, class: 'btn btn-default', title: @undo_message %>
    <% end %>

    <% if @redo_path.present? && !session[:archives_visible].present? %>
      <%= link_to 'Redo', @redo_path, class: 'btn btn-default', title: @redo_message %>
    <% end %>
  </div>
<% end %>

<p>
</p>

<script>
$(document).ready(function()
  {
    $("select[id=github_access_last_accessed_repository]").change(function()
    {
      var current_url   = window.location.href;
      var item_position = current_url.indexOf('item');
      var prefix        = current_url.substring(0, item_position);
      var repository    = escape($("select[id=github_access_last_accessed_repository]").val());
      var url           = prefix + 'github/get_branches/' + repository +  '.json';
      var branch_names  = [];

      $('select[id=github_access_last_accessed_branch]').empty();
      $('select[id=github_access_last_accessed_branch]').append('<option value=""></option>');
      $('select[id=github_access_last_accessed_folder]').empty();
      $('select[id=github_access_last_accessed_folder]').append('<option value=""></option>');

      if (repository === '')
        return branch_names;

      $.ajax(
               {
                 type:        "GET",
                 url:         url,
                 dataType:    'json',
                 contentType: "text/html",
                 async:       false,
                 success:     function (data)
                              {
                                data = JSON.parse(data.branches);

                                for (var i = 0; i < data.length; i++)
                                {
                                  var name = data[i].name;

                                  branch_names.push(name);
                                }
                              }
               }
             );

      for (var i = 0; i < branch_names.length; i++)
      {
        var option = '<option value="' + branch_names[i] + '">' + branch_names[i] + '</option>';
        
        $('select[id=github_access_last_accessed_branch]').append(option);
      }
    });

    $("select[id=github_access_last_accessed_branch]").change(function()
    {
      var current_url   = window.location.href;
      var item_position = current_url.indexOf('item');
      var prefix        = current_url.substring(0, item_position);
      var repository    = escape($("select[id=github_access_last_accessed_repository]").val());
      var branch        = escape($("select[id=github_access_last_accessed_branch]").val());
      var url           = prefix + 'github/get_folders/' + repository +  '/' + branch.replace(/\//g, '|') + '.json';
      var folder_names  = [];

      $('select[id=github_access_last_accessed_folder]').empty();
      $('select[id=github_access_last_accessed_folder]').append('<option value=""></option>');

      if((repository === '') || (branch === ''))
        return folder_names;

        $.ajax(
                 {
                   type:        "GET",
                   url:         url,
                   dataType:    'json',
                   contentType: "text/html",
                   async:       false,
                   success:     function (data)
                                {
                                  data = JSON.parse(data.folders);

                                  for (var i = 0; i < data.length; i++)
                                  {
                                    var path = data[i].path;

                                    folder_names.push(path);
                                  }
                                }
                 }
               );

        for (var i = 0; i < folder_names.length; i++)
        {
          var option = '<option value="' + folder_names[i] + '">' + folder_names[i] + '</option>';
          
          $('select[id=github_access_last_accessed_folder]').append(option);
        }
    });

    $("select[id=github_access_last_accessed_folder]").change(function()
    {
      var current_url        = window.location.href;
      var item_position      = current_url.indexOf('item');
      var prefix             = current_url.substring(0, item_position);
      var last_accessed_file = document.getElementById("github_access_last_accessed_file");
      var repository         = escape($("select[id=github_access_last_accessed_repository]").val());
      var branch             = escape($("select[id=github_access_last_accessed_branch]").val());
      var folder             = escape($("select[id=github_access_last_accessed_folder]").val());
      var url                = prefix + 'github/get_files/' + repository +  '/' + branch.replace(/\//g, '|')  +  '/' + folder.replace(/\//g, '|') + '.json';
      var file_names         = [];
      var files              = '';

      $('select[id=github_access_last_accessed_file]').empty();
      $('select[id=github_access_last_accessed_file]').append('<option value=""></option>');

      if((repository === '') || (branch === ''))
        return file_names;

        $.ajax(
                 {
                   type:        "GET",
                   url:         url,
                   dataType:    'json',
                   contentType: "text/html",
                   async:       false,
                   success:     function (data)
                                {
                                  data = JSON.parse(data.files);

                                  for (var i = 0; i < data.length; i++)
                                  {
                                    var path = data[i].path + '|' + data[i].url + ';' + data[i].id;

                                    file_names.push(path);
                                  }
                                }
                 }
               );

        for (var i = 0; i < file_names.length; i++)
        {
          files += file_names[i] + "\r\n";
        }

        last_accessed_file.value = files;
    });
  }
);
    
  $(":input").keydown(function (event) {
      if (event.keyCode == 112)
        validate();
      else if (event.keyCode == 113)
        window.location.assign(window.location.href.replace(/\/\d+\/edit$/, ''));
  }); 

  function validate()
  {
    var last_accessed_file       = document.getElementById("github_access_last_accessed_file");
    var last_accessed_repository = document.getElementById("github_access_last_accessed_repository");
    var last_accessed_branch     = document.getElementById("github_access_last_accessed_branch");
    var last_accessed_folder     = document.getElementById("github_access_last_accessed_folder");
    var form     = document.forms[0];
    var okay     = (last_accessed_repository.value.length > 0) &&
                   (last_accessed_branch.value.length > 0)     &&
                   (last_accessed_folder.value.length > 0);

    if (okay)
    {
      form.submit();
    }
    else
    {
      alert("You must select a repository, branch and folder.");
    }

    return(okay);
  }
</script>

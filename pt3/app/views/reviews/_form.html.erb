<%= simple_form_for( [@review.item, @review], validate: true, html: { class: 'form-horizontal' }) do |f| %>
  <%= f.error_notification %>
  <% if @review.present? && @review.errors.present? && @review.errors.messages.present? %>
    <% @review.errors.messages.each do |field, messages| %>
      <h4 style="color: red;">
        <%= field.to_s.titleize %>:
        <% messages.each do |message| %>
          <%= message %>&nbsp;
        <% end %>
        <br>
      </h4>
    <% end %>
  <% end %>

  <div class="form-inputs">
    <p>
      <%= f.input :reviewid, required: true, :input_html => { :readonly => !current_user.fulladmin } %>
      <% if @review.reviewtype.present? && ((@review.reviewtype != 'Peer Review') && (@review.reviewtype != 'Transition Review'))%>
        <%  @review.review_type = TemplateChecklist.find_by(title: @review.reviewtype) %>

        <%= f.input :reviewtype, label: 'Specific Review', collection: TemplateChecklist.where(organization: current_user.organization).order(:description), :input_html => { :readonly => !current_user.fulladmin }, :label_method => :name, :value_method => :title, include_blank: true %>
      <% else %>
        <%  @review.review_type = @review.reviewtype %>

        <%= f.input :review_type, collection: ['Transition Review', 'Peer Review'] , include_blank: true, :input_html => { :readonly => !current_user.fulladmin } %>
        <%= f.input :reviewtype, label: 'Specific Review', collection: TemplateChecklist.get_checklists(@item.itemtype, @review.reviewtype), :input_html => { :readonly => !current_user.fulladmin }, :label_method => :name, :value_method => :title, include_blank: true %>
      <% end %>

      <%= f.input :title, required: true, :input_html => { :readonly => !current_user.fulladmin } %>
      <table width='35%' style='border: none;' >
        <tr>
          <td width='48%' >
            <%=
                f.input :unassigned_users,
                        label:         'Unassigned Users',
                        collection:     @review.unassigned_users,
                        label_method:  :fullname,
                        value_method:  :email,
                        input_html:    { multiple: true },
                        include_blank: false
            %>
          </td>
          <td width='4%' >
            <button id='unassigned_to_assigned' type="button" onclick='assign_evaluator();' disabled>></button>
            <br>
            <button id='assigned_to_unassigned' type="button" onclick='unassign_evaluator();' disabled ><</button>
          </td>
          <td width=48%' >
            <%=
                f.input :evaluators,
                        label:         'Evaluators',
                        collection:     @review.evaluators,
                        label_method:  :fullname,
                        value_method:  :email,
                        input_html:    { multiple: true },
                        include_blank: false
            %>
          </td>
        </tr>
      </table>

      <%= f.input :evaldate, label: 'Review Date', as: :date, html5: true  %>
      <%= f.input :description, as: :summernote %>
      <%= f.input :problem_reports_addressed, collection: @problem_reports, :label_method => :fullpr_with_title, :value_method => :id, input_html: { multiple: true }, include_blank: true %>
      <%= f.input :version, :as => :hidden %>

      <% if current_user.fulladmin && @project.present? %>
        <%= f.association :item, collection: Item.where(project_id: @project.id) %>
      <% end %>
    </p>
    <% if @review.present? && @review.id.present? %>
      <p>
        <h4>Files:</h4>
        <br>
        <table width="100%">
          <tr>
            <td width="20el">
            </td>
            <td>
              <table class="table">
                <thead>
                  <tr>
                    <th scope="col">File</th>
                    <th scope="col">Type</th>
                    <th scope="col">Uploaded</th>
                    <th scope="col">Download</th>
                  </tr>
                </thead>
                <tbody>
                  <% @review.review_attachment.each do |revattach| %>
                    <tr>
                      <td>
                        <% if revattach.link_type.present? %>
                           <%= link_to ReviewAttachment.get_attachment_name(revattach), ReviewAttachment.get_attachment_url(revattach) + '?new_window=true', target: :_blank %>
                        <% else %>
                          <% description = revattach.link_description %>

                          <% unless description.present? %>
                            <% description = revattach.link_link %>
                          <% end %>

                          <% if revattach.link_link =~ /^http[s]{0,1}:\/\/.+$/ %>
                            <%= link_to description, revattach.link_link + '?new_window=true' + '?new_window=true', target: :_blank %>
                          <% else %>
                            <%= description %>
                          <% end %>
                        <% end %>
                      </td>
                      <td>
                        <%= Constants::ReviewAttachmentType_hash.key(revattach.attachment_type) %>
                      </td>
                      <td>
                        <%= revattach.upload_date %>
                      </td>
                      <td class="td-centered">
                        <% if policy(:document).download_document? %>
                          <% if (revattach.link_type == Constants::PACT_ATTACHMENT) %>
                            <% if revattach.link_link =~ /^.+\/(\d+)$/ %>
                              <%= link_to item_document_download_document_path(@item, $1) do %>
                                <%= material_icon.get_app.md_24 %><br>Download
                              <% end %>
                            <% else %>
                              &nbsp;
                            <% end %>
                          <% elsif revattach.link_type == Constants::UPLOAD_ATTACHMENT %>
                            <% if revattach.file.attached? %>
                              <%= link_to url_for(revattach.file) + '?new_window=true', target: :_blank do %>
                                <%= material_icon.get_app.md_24 %><br>Download
                              <% end %>
                            <% else %>
                              &nbsp;
                            <% end %>
                          <% elsif revattach.link_type == Constants::EXTERNAL_ATTACHMENT %>
                            <%= link_to revattach.link_link, target: :_blank do %>
                              <%= material_icon.get_app.md_24 %><br>Download
                            <% end %>
                          <% end %>
                        <% else %>
                          &nbsp;
                        <% end %>
                      </td>
                    </tr>
                  <% end %>
                </tbody>
              </table>

              <% if @review.present? && @review.id.present? %>
                <%= link_to 'Add File', new_review_review_attachment_path(@review), class: "btn btn-primary d-print-none", style: "color:white" %>
                <%= link_to 'Manage Files', review_review_attachments_path(@review), class: "btn btn-primary d-print-none", style: "color:white" %>
              <% end %>
            </td>
          </tr>
        </table>
      </p>
      <p>
        <h4>Checklist:</h4>
        <br>
        <table width="100%">
          <tr>
          <td colspan=2>
            <% if @my_checklist_items.present? %>
              <%= link_to 'Fill in Checklist', review_fill_in_checklist_path(@review), class: "btn d-print-none" %>
            <% end %>
          </td>
          </tr>
          <tr>
            <td width="20el">
            </td>
            <td>
              <% @checklist_items = @review.checklist_item.where(user_id: nil) %>

              <%= render 'checklist_index', checklist_items: @checklist_items %>
            </td>
          </tr>
        </table>
      </p>
    <% end %>
  </div>

  <div class="form-actions">
    <input id='edit_review_update_review' name='edit_review_update_review' value='Save Changes' type="button" onclick='validate();' class="btn btn-default" />

    <% if @review.id.present? %>
      <%= link_to 'Show', item_review_path(@item, @review), class: 'btn btn-default'  %>
    <% end %>

    <% if @review.id.present? %>
      <%= link_to 'Sign-In Sheet', review_sign_in_path(@review), class: "btn btn-primary d-print-none" + '?new_window=true', target: :_blank %>
    <% end %>

    <% if @review.id.present? && @review.evaluators.present? && @review.checklist_item.present? && !@review.checklists_assigned %>
      <%= link_to 'Assign Checklists', review_review_renumber_checklist_path(@review), class: "btn d-print-none", style: "color:white" %>
    <% end %>

    <% if current_user.fulladmin %>
      <%= link_to 'Renumber Checklists', review_renumber_checklist_path(@review), class: "btn d-print-none", style: "color:white" %>
    <% end %>

    <% unless session[:archives_visible].present? %>
      <%= link_to 'New Baseline',    new_project_requirements_baseline_path(@project, item_id: @item.id, archive_type: Constants::REVIEW_ARCHIVE, element_id: @review.id), class: 'btn' %>
      <%= link_to 'View Baselines',  project_requirements_baselines_path(@project, item_id: @item.id, archive_type: Constants::REVIEW_ARCHIVE, element_id: @review.id), class: 'btn' %>
    <% end %>

    <%= link_to 'Back', 'javascript:null', class: "btn", onclick: 'validateBack(1)' %>

    <% if @undo_path.present? && !session[:archives_visible].present? %>
      <%= link_to 'Undo', @undo_path, class: 'btn btn-default', title: @undo_message %>
    <% end %>

    <% if @redo_path.present? && !session[:archives_visible].present? %>
      <%= link_to 'Redo', @redo_path, class: 'btn btn-default', title: @redo_message %>
    <% end %>
  </div>
<% end %>

<script>
  var model                    = "review";
  var parent                   = "item";
  var table                    = model  + 's';
  var parent_table             = parent + 's';
  var prefix                   = model  + "_";
  var parent_prefix            = parent + "_";
  var review_type              = model + "_review_type";
  var evaluators               = model + '_evaluators';
  var unassigned_users         = model + '_unassigned_users';
  var review_type_select       = "#" + review_type;
  var evaulators_select        = '#' + evaluators;
  var unassigned_users_select  = '#' + unassigned_users;
  var checklist_filled_in      = false;

  function assign_evaluator()
  {
    var unassigned_users_field = document.getElementById(unassigned_users);
    var evaluators_field       = document.getElementById(evaluators);

    for (var i = 0, len = unassigned_users_field.options.length; i < len; i++)
    {
      var unassigned_user = unassigned_users_field.options[i];

      if (unassigned_user.selected === true)
      {
        var option   = document.createElement("option");

        option.text  = unassigned_user.text;
        option.value = unassigned_user.value;

        evaluators_field.add(option);
        unassigned_users_field.remove(i);
      }
    }
  }

  function unassign_evaluator()
  {
    var unassigned_users_field = document.getElementById(unassigned_users);
    var evaluators_field       = document.getElementById(evaluators);

    for (var i = 0, len = evaluators_field.options.length; i < len; i++)
    {
      var evaluator = evaluators_field.options[i];

      if (evaluator.selected === true)
      {
        var option   = document.createElement("option");

        option.text  = evaluator.text;
        option.value = evaluator.value;

        unassigned_users_field.add(option);
        evaluators_field.remove(i);
      }
    }
  }

  function ajax_error(xhr, textStatus, errorThrown)
  {
    if (xhr.responseText &&
       (xhr.responseText !== ''))
    {
      var newDoc = document.open('text/html',
                                 "replace");

      newDoc.write(xhr.responseText);
      newDoc.close();
    }
    else
    {
      alert("Error Occured. " + textStatus + ": " +
            errorThrown);
    }
  }

  function check_checklists(data)
  {
    checklist_filled_in     = false;

    for (var i = 0; i < data.length; i++)
    {
      if ((data[i].status == 'Pass') ||
          (data[i].status == 'Fail') ||
          (data[i].status == 'N/A'))
      {
        checklist_filled_in = true;

        return checklist_filled_in;
      }
    }

    return checklist_filled_in;
  }

  function evaluators_changed()
  {
    var unassigned_to_assigned_button = document.getElementById('unassigned_to_assigned');
    var assigned_to_unassigned_button = document.getElementById('assigned_to_unassigned');
    var unassigned_users_field        = document.getElementById(unassigned_users);
    var evaluators_field              = document.getElementById(evaluators);
    var reviews_url                   = window.location.href.replace('edit', '');
    var base_url                      = reviews_url.replace(/items.*$/, '');
    var checklists_postfix            = '/checklist_items.json';

    unassigned_to_assigned_button.disabled = true;
    assigned_to_unassigned_button.disabled = false;

    for (var i = 0, len = evaluators_field.options.length; i < len; i++)
    {
        evaluator                     = evaluators_field.options[i];

        if (evaluator.selected === true)
        {
          var url                     = reviews_url +
                                        evaluator.value.replace(/\./g, '_dot_') +
                                        checklists_postfix;

          checklist_filled_in         = false;

          $.ajax(
                   {
                     type:        "GET",
                     url:         url,
                     dataType:    'json',
                     contentType: 'text/html',
                     async:       false,
                     error:       ajax_error,
                     success:     check_checklists
                   }
                 );

            if (checklist_filled_in)
            {
              assigned_to_unassigned_button.disabled = true;

              return;
            }

            for (var j = 0, length = unassigned_users_field.options.length; j < length; j++)
            {
                unassigned_user = unassigned_users_field.options[j];

                if (unassigned_user.value == evaluator.value)
                {
                  assigned_to_unassigned_button.disabled = true;

                  return;
                }
            }
        }
    }
  }

  function unassigned_users_changed()
  {
    var unassigned_to_assigned_button = document.getElementById('unassigned_to_assigned');
    var assigned_to_unassigned_button = document.getElementById('assigned_to_unassigned');
    var unassigned_users_field        = document.getElementById(unassigned_users);
    var evaluators_field              = document.getElementById(evaluators);

    unassigned_to_assigned_button.disabled = false;
    assigned_to_unassigned_button.disabled = true;

    for (var i = 0, len = unassigned_users_field.options.length; i < len; i++)
    {
        unassigned_user = unassigned_users_field.options[i];

        if (unassigned_user.selected === true)
        {
            for (var j = 0, length = evaluators_field.options.length; j < length; j++)
            {
                evaluator = evaluators_field.options[j];

                if (evaluator.value == unassigned_user.value)
                  unassigned_to_assigned_button.disabled = true;
            }
        }
    }
  }

  $( document ).ready(function() {
    $(evaulators_select).change(function()
    {
      evaluators_changed();
    });

    $(unassigned_users_select).change(function()
    {
      unassigned_users_changed();
    });

    $(review_type_select).change(function()
    {
      var current_url       = window.location.href;
      var reviews_position  = current_url.indexOf('reviews');
      var prefix            = current_url.substring(0, reviews_position);
      var review_type_value = document.getElementById(review_type).value;
      var url               = "";

      if (review_type_value === "Transition Review")
        url = prefix + 'template_checklists/transition.json';
      else
        url = prefix + 'template_checklists/peer.json';

      $('#review_reviewtype').empty();
      $('#review_reviewtype').append('<option value=""></option>');
      $.ajax(
               {
                 type:        "GET",
                 url:         url,
                 dataType:    'json',
                 contentType: 'text/html',
                 async:       false,
                 error:       function(xhr, textStatus, errorThrown)
                              {
                                if (xhr.responseText &&
                                   (xhr.responseText !== ''))
                                {
                                  var newDoc = document.open('text/html',
                                                             "replace");

                                  newDoc.write(xhr.responseText);
                                  newDoc.close();
                                }
                                else
                                {
                                  alert("Error Occured. " + textStatus + ": " +
                                        errorThrown);
                                }
                              },
                 success:     function (data)
                              {
                                data = JSON.parse(data.template_checklists);

                                for (var i = 0; i < data.length; i++)
                                {
                                  $('#review_reviewtype').append(`<option value="${data[i].title}">${data[i].description} (${data[i].checklist_class} ${data[i].checklist_type})</option>`);
                                }
                              }
               }
             );
    });
  });

  $(":input").keydown(function (event) {
      if (event.keyCode == 112)
        validate();
      else if (event.keyCode == 113)
        window.location.assign(window.location.href.replace(/\/\d+\/edit$/, ''));
  }); 

  function validate()
  {
    var form                 = document.forms[0];
    var okay                 = validateForm();
    var messageText          = "";
    var evaluators_field     = document.getElementById(evaluators);

    if (!okay)
      return false;

    for (var i = 0, len = evaluators_field.options.length; i < len; i++)
    {
        evaluator            = evaluators_field.options[i];
        evaluator.selected   = true;
    }

    if (okay)
    {
      form.submit();
    }
    else
    {
      message.value          = messageText;
      message.style.display  = "none";

      alert(messageText);
    }

    return(okay);
  }
</script>

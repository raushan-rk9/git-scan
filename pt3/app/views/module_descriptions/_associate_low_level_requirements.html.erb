<style> 
  input[type="radio"], input[type="checkbox"]
  {
    padding-top: 10px !important;
    width: 20px       !important; 
    height: 20px      !important; 
  }

  .low_level_requirement_all
  {
    width: 20px !important;
  }

  .itemColumn
  {
     width: 20%            !important;
     align-content: center !important;
     text-align:    left   !important;
  }

  .idColumn
  {
     width: 20%            !important;
     align-content: center !important;
     text-align:    left   !important;
  }

  .descriptionColumn
  {
     width: 55%            !important;
     align-content: center !important;
     text-align:    left   !important;
  }

  .verificationMethodColumn
  {
     width: 15%            !important;
     align-content: center !important;
     text-align:    left   !important;
  }

  .checkboxColumn
  {
     width: 5%             !important;
     align-content: center !important;
     text-align:    center !important;
  }

  table.lowLevelRequirementsDataTable thead th
  {
     height: 0px         !important;
     vertical-align: top !important;
  }

  table.lowLevelRequirementsDataTable tbody td
  {
     height: 0px         !important;
     vertical-align: top !important;
  }
</style>

Choose Hardware/Software Item in which to find <%= Item.item_type_title(@item, :low_level, :plural) %>
<br>
<select id='low_level_item_select' multiple=true>
  <option></option>
  <% Item.where(project_id: @project.id).order(:identifier).each do |item| %>
    <% if item.id == @item.id %>
      <option id='item_<%= item.id %>' value='<%= item.id %>' selected><%= item.identifier %></option>
    <% else %>
      <option id='item_<%= item.id %>' value='<%= item.id %>'><%= item.identifier %></option>
    <% end %>
  <% end %>
</select>

<table id="lowLevelRequirementsDataTable" class="table table-striped table-bordered table-sm" cellspacing="0"  width="100%">
  <thead>
    <tr>
      <th class="low_level_requirement_all"><input :select_low_level_requirement_all_low_level_requirements, { type="checkbox", id="select_low_level_requirement_all_low_level_requirements", value="ALL"}>&nbsp;</th>
      <th scope="col" class="itemColumn">Hardware/<br>Software Item</th>
      <th scope="col" class="idColumn"><%= @item.get_item_title(:low_level, :singular_shortened) %></th>
      <th scope="col" class="descriptionColumn"><%= t('misc.desc') %></th>
      <th scope="col" class="verificationMethodColumn"><%= t('misc.verification_method') %></th>
      <th scope="col" class='checkboxColumn'>Derived</th>
    </tr>
  </thead>

  <tbody>
    <% if @low_level_requirements.present? %>
      <% @low_level_requirements.each do |low_level_requirement| %>
        <tr>
          <% if low_level_requirement.selected %>
            <td class="low_level_requirement_all">&nbsp;&nbsp;<input id='low_level_requirement.<%= low_level_requirement.id %>' name='low_level_requirement.<%= low_level_requirement.id %>' type="checkbox" checked value="<%= low_level_requirement.id %>" /></td>
          <% else %>
            <td class="low_level_requirement_all">&nbsp;&nbsp;<input id='low_level_requirement.<%= low_level_requirement.id %>' name='low_level_requirement.<%= low_level_requirement.id %>' type="checkbox" value="<%= low_level_requirement.id %>"/></td>
          <% end %>
          <td scope="col" class="itemColumn"><%= @item.identifier %></th>
          <td class="idColumn"><%= low_level_requirement.fullreqid %></td>
          <td class="descriptionColumn"><%= raw low_level_requirement.description %></td>
          <td class="verificationMethodColumn">
            <% if low_level_requirement.verification_method.instance_of?(Array) %>
              <%= low_level_requirement.verification_method.delete_if{ |x| !x.present? }.join(', ') %>
            <% elsif low_level_requirement.verification_method.instance_of?(String) %>
              <%= low_level_requirement.verification_method %>
            <% end %>
          </td>
          <td class='checkboxColumn'><%= checkicon(low_level_requirement.derived) %></td>
        </tr>
      <% end %>
    <% end %>
  </tbody>
</table>

<br>
<input type='button' value='Save <%= Item.item_type_title(@item, :low_level, :singular) %> Links' style='display: none' onclick='submitLowLevelRequirements();' class='btn' />
<br>

<script>
var lowLevelRequirementsDataTable = $('#lowLevelRequirementsDataTable').DataTable({
  "sDom":           "Rlfrtip",
  "scrollX":        true,
  "scrollY":        "65vh",
  "aLengthMenu":    [[10, 50, 100, -1], [25, 50, 100, "All"]],
  "pageLength":     -1,
  "scrollCollapse": true,
  "paging":         false,
  "ordering":       false,
  "info":           false
});

function redrawLowLevelRequirementsTable()
{
  lowLevelRequirementsDataTable.draw();
}

function ajaxError(xhr, textStatus, errorThrown)
{
  if (xhr.responseText &&
     (xhr.responseText !== ''))
  {
    var newDoc = document.open('text/html',
                               "replace");

    newDoc.write(xhr.responseText);
    newDoc.close();
  }
  else
  {
    alert("Error Occured. " + textStatus + ": " +
          errorThrown);
  }
}

function getLowLevelRequirementCells(row, count)
{
  var cells  = [];

  for (var j = 0; j < count; j++)
    cells[j] = $(`#lowLevelRequirementsDataTable tr:${row} td:eq(${j})`);

  return cells;
}

function populateLowLevelRequirementRow(itemName, requirementID, description,
                                        verification_method)
{
  var rowNode;
  var method  = '';

  if (verification_method.length > 0)
  {
    for (var i = 0; i < verification_method.length; i++)
    {
      if (verification_method[i] !== '')
      {
        if (method === '')
          method  = verification_method[i];
        else
          method += ', '+ verification_method[i];
      }
    }
  }

  rowNode = lowLevelRequirementsDataTable.row.add([
                                     '',
                                     itemName,
                                     requirementID,
                                     description,
                                     method,
                                     ''
                                  ]).node();

  return rowNode;
}

function setLowLevelRequirementCheckbox(cell, value, id)
{
  if (value)
    cell.outerHTML = ('<td class="low_level_requirement_all">&nbsp;&nbsp;<input id="module_description.' + id + '" name="module_description.' + id + '" type="checkbox" checked value="' + id + '"/></td>');
  else
    cell.outerHTML = ('<td class="low_level_requirement_all">&nbsp;&nbsp;<input id="module_description.' + id + '" name="module_description.' + id + '" type="checkbox" value="' + id + '"/></td>');
}

function setLowLevelRequirementCheckicon(cell, value)
{
  if (value)
    cell.outerHTML = ('<td class="checkboxColumn"><i class="far fa-check-square"></i></td>');
  else
    cell.outerHTML = ('<td class="checkboxColumn"><i class="far fa-square"></i></td>');
}

function processLowLevelRequirementsData(data)
{
  var selectedField        = document.getElementById("module_description_low_level_requirement_associations");
  var selectedRequirements = selectedField.value.split(',');

  lowLevelRequirementsDataTable.clear();

  for (var j = 0; j < data.length; j++)
  {
    var llr      = data[j];

    if (llr.soft_delete)
      continue;

    var id       = llr.id;
    var item_id  = '#item_' + llr.item_id;
    var rowNode  = populateLowLevelRequirementRow($(item_id).text(),
                                                  llr.full_id,
                                                  llr.description,
                                                  llr.verification_method);
    var cells    = rowNode.children;
    var selected = false;

    for (var k = 0; k < selectedRequirements.length; k++)
    {
      if (selectedRequirements[k] == id)
      {
        selected = true;

        break;
      }
    }

    setLowLevelRequirementCheckbox(cells[0],  selected, id);
    setLowLevelRequirementCheckicon(cells[5], llr.derived);
    cells[1].classList.add("itemColumn");
    cells[2].classList.add("idColumn");
    cells[3].classList.add("descriptionColumn");
  }

  lowLevelRequirementsDataTable.draw();
}

$("#low_level_item_select").change(function()
{
  var itemIDs    = $('#low_level_item_select').val();
  var url        = window.location.href;
  var itemsIndex = url.indexOf('items/');
  var idString   = '';

  for (var j = 0; j < itemIDs.length; j++)
  {
    if (itemIDs[j] !== '')
    {
      if (idString === '')
        idString  = itemIDs[j];
      else
        idString += ',' + itemIDs[j];
    }
  }

  if (idString === '')
    return;

  url = url.substring(0, itemsIndex + 6) + idString + '/low_level_requirements.json';

  $.ajax(
           {
             type:        "GET",
             url:         url,
             dataType:    'json',
             contentType: 'text/html',
             async:       false,
             error:       ajaxError,
             success:     processLowLevelRequirementsData
           }
        );

  redrawLowLevelRequirementsTable();
});

$("#select_low_level_requirement_all_low_level_requirements").change(function()
{
  var checked = false;

  if (document.getElementById("select_low_level_requirement_all_low_level_requirements").checked)
    checked = true;
  else
    checked = false;

  $("td.low_level_requirement_all input[type=checkbox]").prop('checked', checked);
});

function submitLowLevelRequirements()
{
  var selectedField                              = document.getElementById("module_description_low_level_requirement_associations");
  var linkedLowLevelRequirementsbutton           = document.getElementById('link_low_level_requirements_button');
  var linkedLowLevelRequirementsDiv              = document.getElementById('linked_low_level_requirements');
  var selected                                   = "";

  $('[id*="low_level_requirement."]').each(function(){
    if ($(this).prop('checked'))
    {
      var value = $(this).prop('value');

      if (value !== "ALL") {
        if (selected !== "")
          selected += "," + value;
        else
          selected = value;
      }
    }
  });

  selectedField.value = selected;

  linkedLowLevelRequirementsDiv.style.display    = 'none';
  linkedLowLevelRequirementsbutton.style.display = 'block';
  linkedLowLevelRequirementsbutton.value         = 'Link <%= Item.item_type_title(@item, :low_level, :plural) %>';

  return(true);
}
</script>

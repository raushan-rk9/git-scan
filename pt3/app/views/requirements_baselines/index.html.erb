<style>
table.dataTable thead .sorting_asc:before,
table.dataTable thead .sorting_asc:before,
table.dataTable thead .sorting_asc:before,
table.dataTable thead .sorting_asc:before,
table.dataTable thead .sorting_asc:before,
table.dataTable thead .sorting_asc:before,
table.dataTable thead .sorting_asc:before,
table.dataTable thead .sorting_asc:before,
table.dataTable thead .sorting_asc:before,
table.dataTable thead .sorting_asc:before {}

table th
{
  font-family: verdana !important;
  font-size:   14px    !important;
  line-height: 18px    !important;
}

table td
{
  font-family: verdana !important;
  font-size:   14px    !important;
  line-height: 18px    !important;
}
</style>

<h1><%= @archive_type.titleize %> Baselines <%= t('misc.list') %></h1>

<table id="scrollableDataTable" class="table table-striped table-bordered table-sm" cellspacing="0"  width="100%">
  <thead>
    <tr>
      <th class="th-sm"><%= t('misc.name') %></th>
      <th class="th-sm"><%= t('misc.ident') %></th>
      <th class="th-sm"><%= t('misc.desc') %></th>
      <th class="th-sm"><%= t('versioning.revision') %></th>
      <th class="th-sm">Draft <%= t('versioning.versionid') %></th>
      <th class="th-sm">Baselined At</th>
      <th class="th-sm"></th>
      <th class="th-sm"></th>
      <th class="th-sm"></th>
      <th class="th-sm"></th>
    </tr>
  </thead>

  <tbody>
    <% @requirements_baselines.each do |requirements_baseline| %>
      <tr>
        <td><%= requirements_baseline.name %></td>
        <td><%= requirements_baseline.full_id %></td>
        <td><%= sanitize requirements_baseline.description %></td>
        <td class="td-centered"><%= requirements_baseline.revision %></td>
        <td class="td-centered"><%= requirements_baseline.version %></td>
        <td><%= requirements_baseline.archived_at %></td>
        <td class="td-centered">
          <% if policy(requirements_baseline).view? %>
            <%= link_to project_archive_view_path(@project, requirements_baseline) do %>
              <%= material_icon.input.md_24 %><br>View<br>Contents
            <% end %>
          <% else %>
            &nbsp;
          <% end %>
        </td>
        <td class="td-centered">
          <% if policy(requirements_baseline).show? %>
            <%= link_to project_requirements_baseline_path(@project, requirements_baseline) do %>
              <%= material_icon.zoom_in.md_24 %><br>Show
            <% end %>
          <% else %>
            &nbsp;
          <% end %>
        </td>
        <td class="td-centered">
          <% if policy(requirements_baseline).edit? %>
            <%= link_to edit_project_requirements_baseline_path(@project, requirements_baseline) do %>
              <%= material_icon.edit.md_24 %><br>Edit
            <% end %>
          <% else %>
            &nbsp;
          <% end %>
        </td>
        <td class="td-centered">
          <% if policy(requirements_baseline).destroy? %>
            <%= link_to project_requirements_baseline_path(@project, requirements_baseline), method: :delete, data: { confirm: 'Are you sure?' } do %>
              <%= material_icon.delete.md_24 %><br>Delete
            <% end %>
          <% else %>
            &nbsp;
          <% end %>
        </td>
      </tr>
    <% end %>
  </tbody>
</table>

<br>
<%
  object_name = 'Requirements'

  case @archive_type
    when Constants::PROJECT_ARCHIVE
      object_name = I18n.t('projects.single_title')
    when Constants::DOCUMENT_ARCHIVE
      object_name = I18n.t('misc.document')
    when Constants::MODEL_ARCHIVE
      object_name = I18n.t('misc.model_file')
    when Constants::SYSTEM_REQUIREMENTS_ARCHIVE
      object_name = I18n.t('misc.system_requirement')
    when Constants::HIGH_LEVEL_REQUIREMENTS_ARCHIVE
      object_name = @item.get_item_title(:high_level, :singular)
    when Constants::LOW_LEVEL_REQUIREMENTS_ARCHIVE
      object_name = @item.get_item_title(:low_level, :singular)
    when Constants::SOURCE_CODE_ARCHIVE
      object_name = I18n.t('misc.source_code')
    when Constants::TEST_CASE_ARCHIVE
      object_name = I18n.t('misc.test_case')
    when Constants::TEST_PROCEDURE_ARCHIVE
      object_name = I18n.t('misc.test_procedure')
  end
%>
<%= link_to "New #{object_name} Baseline", new_project_requirements_baseline_path(@project),  class: 'btn' %>
<%= link_to 'Back', go_back_path(1),  onclick: 'validateBack(1, this)', class: 'btn' %>

<% if @undo_path.present? && !session[:archives_visible].present? %>
  <%= link_to 'Undo', @undo_path, class: 'btn btn-default', title: @undo_message %>
<% end %>

<% if @redo_path.present? && !session[:archives_visible].present? %>
  <%= link_to 'Redo', @redo_path, class: 'btn btn-default', title: @redo_message %>
<% end %>

<script>
  $(document).ready
  (
    {
      if (document.cookie.match(/scrollTop=(\d+)/))
        $(window).scrollTop(document.cookie.match(/scrollTop=(\d+)/)[1]);

      var first     = true;
      var sortOrder = '[0, "asc"]';

      if (Cookies.get("requirements_baselines_table_order"))
        sortOrder = Cookies.get("requirements_baselines_table_order")
    
      if (document.cookie.match(/scrollTop=(\d+)/))
        $(window).scrollTop(document.cookie.match(/scrollTop=(\d+)/)[1]);

      $('#scrollableDataTable').DataTable
      (
        {
          "sDom":           "Rlfrtip",
          "scrollX":        true,
          "scrollY":        "55vh",
          "aLengthMenu":    [[10, 50, 100, -1], [25, 50, 100, "All"]],
          "pageLength":     -1,
          "scrollCollapse": true,
          "paging":         false,
          "ordering":       true,
          "info":           false,
          "drawCallback":   function(settings)
                            {
                              get_order(!first);
                            },
          "order":          JSON.parse(sortOrder)
        }
      );

      $(window).unload(function() {document.cookie = "scrollTop=" + $(window).scrollTop();});

      var tableOrder  = Cookies.get("requirements_baselines_table_order");

      function get_order(force)
      {
        if (!Cookies.get("requirements_baselines_table_order") || force)
        {
          var table   = $('#scrollableDataTable').DataTable();
          var date    = new Date();
          var minutes = 30;

          first       = false;

          date.setTime(date.getTime() + (minutes * 60 * 1000));
          Cookies.set('requirements_baselines_table_order', table.order(), { expires: date });

          return table.order();      
        }
        else
        {
          first       = false;

          return Cookies.get("requirements_baselines_table_order") ;
        }
      }
    }
  );
</script>
<%= simple_form_for( [@document.item, @document], validate: true, html: { class: 'form-horizontal' }) do |f| %>
  <%= f.error_notification %>
  <% if @document.present? && @document.errors.present? && @document.errors.messages.present? %>
    <% @document.errors.messages.each do |field, messages| %>
      <h4 style="color: red;">
        <%= field.to_s.titleize %>:
        <% messages.each do |message| %>
          <%= message %>&nbsp;
        <% end %>
        <br>
      </h4>
    <% end %>
  <% end %>
  <div class="form-inputs">
    <%= f.input       :docid,             required: true,                         label: t('document.docid'), :input_html => { :readonly => (@document.revision.present? || (@document.file.attached? && @document.id.present?)) } %>
    <%= f.input       :name, as: :string, required: true,                                                     :input_html => { :readonly => (@document.revision.present? || (@document.file.attached? && @document.id.present?)) } %>
    <%= f.input       :document_type,     collection: @document_types,            label_method:  :description, value_method: :document_code, include_blank: true, :input_html => { :readonly => @document.revision.present? }  %>
    <%= f.input       :category,          collection: Constants::ControlCategory, label: 'Control Category', include_blank: true, :input_html => { :readonly => @document.revision.present? }  %>
    <%= f.file_field  :file %>

    <% if @document.file.attached? && @document.id.present? %>
      &nbsp;&nbsp;&nbsp;&nbsp;

      <%= link_to item_document_download_document_path(@item, @document) + '?new_window=true', target: :_blank  do %>
        Download Existing Document
      <% end %>
    <% end %>

    <% if current_user.fulladmin && !@document.revision.present? %>
      <%= f.association :review,           collection: Review.where(item_id: @item.id), :input_html => { :readonly => false }  %>
      <%= f.input       :review_status,    collection: Constants::ReviewStatus,         :input_html => { :readonly => false }, include_blank: true %>
    <% else %>
      <%= f.association :review,           collection: Review.where(item_id: @item.id), :input_html => { :readonly => true }  %>
      <%= f.input       :review_status,    collection: Constants::ReviewStatus,         :input_html => { :readonly => true },  include_blank: true %>
    <% end %>

    <%= f.input         :release_document, as: :boolean, input_html: { :readonly => @document.revision.present? , "data-tooltip" => true, :class => "has-tip", :title => "If you click 'Release Document', after saving, you can't go back to a previous revision.\n\nClicking 'Release Document' creates a release that is a CC1 controlled item under Problem Reporting.\n\nA review is expected to be attached and the review status should be Pass before clicking 'Release Document'." }  %>

    <% if current_user.fulladmin %>
      <%= f.input       :draft_revision, label: 'Draft Version', :input_html => { :readonly =>  @document.revision.present? } %>
      <%= f.input       :revision,                               :input_html => { :readonly =>  @document.revision.present? } %>
      <%= f.input       :revdate, as: :date, html5: true,        :input_html => { :readonly =>  @document.revision.present? } %>
    <% else %>
      <%= f.input       :draft_revision, label: 'Draft Version', :input_html => { :readonly =>  @document.revision.present? } %>
      <%= f.input       :revision,                               :input_html => { :readonly =>  @document.revision.present? } %>
      <%= f.input       :revdate, as: :date, html5: true,        :input_html => { :readonly =>  @document.revision.present? } %>
    <% end %>

    <br>

    <% if current_user.fulladmin && @project.present? %>
      <%= f.association :parent, label: 'Folder', collection: Document.where(item_id: @item.id, document_type: 'Folder') %>
      <%= f.association :item,   collection: Item.where(project_id: @project.id) %>
    <% end %>

    <%= f.input       :version,       :as => :hidden %>

    <input name='original_draft_revision' id='original_draft_revision' type='hidden' value='<%= @document.draft_revision %>' />
    <input name='original_revision'       id='original_revision'       type='hidden' value='<%= @document.revision %>' />
    <input name='original_revdate'        id='original_revdate'        type='hidden' value='<%= @document.revdate %>' />
  </div>

  <div class="form-actions">
    <% if controller.action_name == 'new' || !@document.id.present? %>
      <input id='update_document' name='update_document' value='Create Document' type="button" onclick='validate();' class="btn btn-default" />
    <% else %>
      <input id='update_document' name='update_document' value='Update Document' type="button" onclick='validate();' class="btn btn-default" />
    <% end %>

    <% if @document.id.present? %>
      <%= link_to 'Show',         item_document_path(@item, @document),             class: 'btn btn-default' %>
    <% end %>

    <% unless controller.action_name == "new" %>
      <% unless session[:archives_visible].present? %>
        <%= link_to 'New Baseline',    new_project_requirements_baseline_path(@project, item_id: @item.id, archive_type: Constants::DOCUMENT_ARCHIVE, element_id: @document.id), class: 'btn' %>
        <%= link_to 'View Baselines',  project_requirements_baselines_path(@project, item_id: @item.id, archive_type: Constants::DOCUMENT_ARCHIVE, element_id: @document.id), class: 'btn' %>
      <% end %>

      <%= link_to 'New Document', new_item_document_path(@item), class: "btn btn-primary", style: "color:white" %>
    <% end %>

    <%= link_to 'Back', 'javascript:null', class: "btn", onclick: 'validateBack(1)' %>

    <% if @undo_path.present? && !session[:archives_visible].present? %>
      <%= link_to 'Undo',         @undo_path,                                       class: 'btn btn-default' %>
    <% end %>

    <% if @redo_path.present? && !session[:archives_visible].present? %>
      <%= link_to 'Redo',         @redo_path,                                       class: 'btn btn-default' %>
    <% end %>
  </div>
<% end %>
<script>
  var model                 = "document";
  var prefix                = model  + "_";
  var draftRevision         = prefix + "draft_revision";
  var revision              = prefix + 'revision';
  var revdate               = prefix + 'revdate';
  var release               = prefix + 'release_document';
  var review                = prefix + 'review_id';
  var reviewStatus          = prefix + 'review_status';
  var documentType          = prefix + 'document_type';
  var controlCategory       = prefix + 'category';
  var originalDraftRevision = 'original_draft_revision';
  var originalRevision      = 'original_revision';
  var originalRevdate       = 'original_revdate';
  var releaseSelect         = '#' + release;
  var reviewSelect          = '#' + review;
  var reviewStatusSelect    = '#' + reviewStatus;
  var documentTypeSelect    = '#' + documentType;
  var controlCategorySelect = '#' + controlCategory;
  var controlCategories     = {};

  <% if @document_types.present? && !@document_types.empty? %>
    <% @document_types.each do |document_type| %>
      controlCategories['<%= document_type.document_code %>'] = '<%= document_type.control_category %>'
    <% end %>
  <% end %>

  $(documentTypeSelect).append('<option value="Document">Generic Document</option>');
  $(documentTypeSelect).append('<option value="Template">Template Document</option>');
  $(documentTypeSelect).append('<option value="Folder">Folder Containing other Documents</option>');
  $(documentTypeSelect).append('<option value="Other">Other Type of Document</option>');

  function isInteger(data)
  {
    return parseInt(data, 10);
  }

  function incrementInteger(data)
  {
    var result;
    
    if (isInteger(data))
    {
      result = data + 1;
    }
    else
    {
      result = 1;
    }

    return result;
  }

  function decrementInteger(data)
  {
    var result;
    
    if (isInteger(data))
    {
      result = data - 1;
    }
    else
    {
      result = 1;
    }

    return result;
  }

  function isFloat(data)
  {
    return parseFloat(data);
  }

  function incrementFloat(data, by, floor)
  {
    var result;

    if (isFloat(data))
    {
      if (floor)
        data = 0.0 + Math.floor(data);

      result = data + by;
    }
    else
    {
      result = 1.0;
    }

    return result;
  }

  function decrementFloat(data, by)
  {
    var result;
    
    if (isFloat(data))
    {
      result = data - by;
    }
    else
    {
      result = 1.0;
    }

    return result;
  }

  function digitToAlpha(digit, uppercase)
  {
    var result = null;

    if (!isInteger(digit) || (digit < 0) || (digit > 25))
      return result;

    if (uppercase)
      result = String.fromCharCode(64 + digit);
    else
      result = String.fromCharCode(96 + digit);
      
    return result;
  }

  function alphaToDigit(alpha)
  {
    var result = null;

    if ((alpha >= 'A') && (alpha <= 'Z'))
      result = alpha.charCodeAt(0) - 64;
    else if ((alpha >= 'a') && (alpha <= 'z'))
      result = alpha.charCodeAt(0) - 96;

    return result;
  }

  function incrementAlphaRevision(alphaRevision)
  {
    /*
       This only deals with a string that is all of the same case
       Since this is for revisions we limit the string from 'A' to 'ZZ'
       the assumption is that there will not be more than 675 revisions
     */

    var uppercase   = false;

    if (alphaRevision.match(/^[a-z]+$/i))
    {
      var alpha       = alphaRevision.charAt(0);

      uppercase       = ((alpha >= 'A') && (alpha <= 'Z'));
    }

    if (alphaRevision.match(/^[a-z]$/i))
    {
      alphaRevision   = alphaToDigit(alphaRevision);

      alphaRevision++;

      if (alphaRevision <= 25)
        alphaRevision = digitToAlpha(alphaRevision, uppercase);
      else
        alphaRevision = uppercase ? 'AA' : 'aa';
    }
    else if (alphaRevision.match(/^[a-z][a-z]$/i))
    {
      var digits      = [];

      digits[0]       = alphaToDigit(alphaRevision.charAt(0));
      digits[1]       = alphaToDigit(alphaRevision.charAt(1));
      alphaRevision   = (digits[0] * 26) + digits[1];
      alphaRevision  += 1;

      if (alphaRevision > 675)
        alphaRevision = uppercase ? 'AAA' : 'aaa';
      else
        alphaRevision = digitToAlpha((alphaRevision / 26), uppercase) +
                        digitToAlpha((alphaRevision % 26), uppercase);
    }

    return alphaRevision;
  }

  function changeRelease()
  {
    var releaseField                 = document.getElementById(release);
    var draftRevisionField           = document.getElementById(draftRevision);
    var revisionField                = document.getElementById(revision);
    var revdateField                 = document.getElementById(revdate);

    if (releaseField.checked)
    {
      var draftRevisionValue         = draftRevisionField.value;
      var revisionValue              = revisionField.value;
      var todaysDate                 = new Date().toISOString().slice(0, 10);

      if (revisionValue === "")
      {
        revisionField.value          = 'A';
        draftRevisionField.value     = '1.0';
      }
      else
      {
        revisionValue                = incrementAlphaRevision(revisionValue);
        revisionField.value          = revisionValue.toUpperCase();
        draftRevisionField.value     = incrementFloat(draftRevisionValue, 1.0,
                                                      true) + ".0";
      }

      revdateField.value             = todaysDate;
    }
    else
    {
      var originalDraftRevisionField = document.getElementById(originalDraftRevision);
      var originalRevisionField      = document.getElementById(originalRevision);
      var originalRevdateField       = document.getElementById(originalRevdate);

      draftRevisionField.value       = originalDraftRevisionField.value;
      revisionField.value            = originalRevisionField.value;
      revdateField.value             = originalRevdateField.value;
    }
  }

  function ajax_error(xhr, textStatus, errorThrown)
  {
    if (xhr.responseText &&
       (xhr.responseText !== ''))
    {
      var newDoc = document.open('text/html',
                                 "replace");

      newDoc.write(xhr.responseText);
      newDoc.close();
    }
    else
    {
      alert("Error Occured. " + textStatus + ": " +
            errorThrown);
    }
  }

  function changeReview()
  {
    var reviewID              = document.getElementById(review).value;
    var url                   = window.location.href;
    var documentsIndex        = url.indexOf('documents');

    if ((reviewID === null) || (reviewID === ''))
    {
      var reviewStatusField   = document.getElementById(reviewStatus);

      reviewStatusField.value = '';

      return;
    }

    url                = url.substring(0, documentsIndex) + 'reviews/' + reviewID + '/status';

    $.ajax(
             {
               type:        "GET",
               url:         url,
               dataType:    'json',
               contentType: 'text/html',
               async:       false,
               error:       ajax_error,
               success:     function(data)
                            {
                              var reviewStatusField        = document.getElementById(reviewStatus);
                              var releaseField             = document.getElementById(release);

                              if (data)
                              {
                                reviewStatusField.value    = 'Pass';
                                reviewStatusField.disabled = true;
                                releaseField.disabled      = false;
                              }
                              else
                              {
                                reviewStatusField.value    = 'Fail';
                                reviewStatusField.disabled = true;
                                releaseField.disabled      = true;
                              }
                            }
             }
           );
  }

  function changeReviewStatus()
  {
    var reviewStatusField = document.getElementById(reviewStatus);
    var releaseField      = document.getElementById(release);
    var reviewID          = document.getElementById(review).value;

    if ((reviewStatusField.value == 'Pass') && (reviewID !== null))
      releaseField.disabled = false;
    else
      releaseField.disabled = true;
  }

  function changeDocumentType()
  {
    var documentTypeValue    = document.getElementById(documentType).value;
    var controlCategoryValue = controlCategories[documentTypeValue];

    $(controlCategorySelect).val(controlCategoryValue);
  }

  $(releaseSelect).change(changeRelease);
  $(reviewSelect).change(changeReview);
  $(reviewStatusSelect).change(changeReviewStatus);
  $(documentTypeSelect).change(changeDocumentType);
  changeReview();

  $(":input").keydown(function (event) {
      if (event.keyCode == 112)
        validate();
      else if (event.keyCode == 113)
        window.location.assign(window.location.href.replace(/\/\d+\/edit$/, ''));
  }); 

  setupChangeNotification();

  function validate()
  {
    var form                 = document.forms[0];
    var okay                 = validateForm();
    var messageText          = "";

    if (!okay)
      return(okay);

    if (okay)
    {
      form.submit();
    }
    else
    {
      message.value          = messageText;
      message.style.display  = "none";

      alert(messageText);
    }

    return(okay);
  }
</script>